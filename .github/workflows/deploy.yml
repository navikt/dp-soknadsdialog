name: Build and deploy

on: [push]

env:
  IMAGE: ghcr.io/${{ github.repository }}/dp-soknadsdialog:${{ github.sha }}
  LATEST_IMAGE: ghcr.io/${{ github.repository }}/dp-soknadsdialog:latest
  BASE_PATH: /arbeid/dagpenger/soknad

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"
          cache: "npm"
          registry-url: "https://npm.pkg.github.com"

      - name: Install
        run: npm install --no-save --no-audit --prefer-offline --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

      - name: Test
        run: npm test

  build:
    name: Build and Publish Docker image
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }},${{ env.LATEST_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            "NODE_AUTH_TOKEN=${{ secrets.READER_TOKEN }}"
            "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}"

      - name: Archive NAIS yaml
        # if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v1
        with:
          name: nais-yaml
          path: nais

  deploy-dev:
    name: Deploy to dev
    needs: [test, build]
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Fetch NAIS yaml
        uses: actions/download-artifact@v1
        with:
          name: nais-yaml
          path: nais

      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais/nais.yaml
          VARS: nais/dev.yaml
          PRINT_PAYLOAD: true


      - name: Lag deployment i Sentry
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_URL: https://sentry.gc.nav.no
          SENTRY_ORG: nav
          SENTRY_PROJECT: dp-soknadsdialog
        with:
          environment: development
          version: ${{ github.sha }}
          set_commits: skip
#  deploy-prod:
#    name: Deploy to Production
#    needs: [deploy-dev]
#    if: github.ref == 'refs/heads/main'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Fetch NAIS yaml
#        uses: actions/download-artifact@v1
#        with:
#          name: nais-yaml
#          path: nais
#
#      - uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: prod-gcp
#          RESOURCE: nais/nais.yaml
#          VARS: nais/prod.yaml
#          PRINT_PAYLOAD: true

#      - name: Lag deployment i Sentry
#        uses: getsentry/action-release@v1
#        env:
#          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          SENTRY_URL: https://sentry.gc.nav.no
#          SENTRY_ORG: nav
#          SENTRY_PROJECT: dp-soknadsdialog
#        with:
#          environment: production
#          version: ${{ github.sha }}
#          set_commits: skip

#  reportFailure:
#    name: Report build failure to Slack
#    needs: [ test, build ]
#    if: ${{ failure() }}
#    runs-on: ubuntu-latest
#    steps:
#      - run: |
#          curl -X POST --data-urlencode "payload={\"channel\": \"$CHANNEL\", \"username\": \"$USERNAME\", \"text\": \"$MESSAGE\", \"icon_emoji\": \":neutral_face:\"}" $WEBHOOK_URL
#        env:
#          USERNAME: "Github Actions"
#          MESSAGE: "The build is broken!"
#          CHANNEL: "#team-dagpenger-quiz"
#          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
#
