name: Build and deploy

on: [push]

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v3
        if: steps.node_modules.outputs.cache-hit != 'true'
        with:
          node-version: "18.x"
          cache: "npm"
          registry-url: "https://npm.pkg.github.com"

      - run: npm ci --ignore-scripts
        if: steps.node_modules.outputs.cache-hit != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

  test:
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - run: npm test

  build:
    needs: [install]
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}

      - name: Cache .next/cache
        uses: actions/cache@v3
        with:
          path: ./.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - run: npm run build

      # Bygg docker image
      - name: docker-build-push
        uses: nais/docker-build-push@v0
        id: docker-build-push
        with:
          team: teamdagpenger
          push_image: true # optional, default true
          dockerfile: Dockerfile # optional, default Dockerfile
          docker_context: . # optional, default .
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

      - name: Cache static files
        uses: actions/cache@v3
        with:
          path: ./.next/static
          key: ${{ github.sha }}
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}

  upload-cdn:
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/cache@v3
        with:
          path: ./.next/static
          key: ${{ github.sha }}
          fail-on-cache-miss: true

      - name: Upload static files
        uses: navikt/frontend/actions/cdn-upload/v1@main
        with:
          cdn-team-name: teamdagpenger
          source: ./.next/static
          destination: "/dp-soknadsdialog/_next"

  deploy-dev:
    needs: [test, build, upload-cdn]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: .nais/nais.yaml
          VARS: .nais/vars-dev.yaml
          VAR: image=${{ needs.build.outputs.image }}
          PRINT_PAYLOAD: true

  deploy-prod:
    needs: [test, build, upload-cdn]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: .nais/nais.yaml
          VARS: .nais/vars-prod.yaml
          VAR: image=${{ needs.build.outputs.image }}
          PRINT_PAYLOAD: true
